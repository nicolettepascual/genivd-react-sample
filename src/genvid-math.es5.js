function equal(t,n,o){return Math.abs(n-t)<=o}function vec2(t,n){return{x:t,y:n}}function equal2D(t,n,o){return equal(t.x,n.x,o)&&equal(t.y,n.y,o)}function clamp(t,n,o){return Math.min(Math.max(t,n),o)}function mix(t,n,o){return t+(n-t)*o}function add2D(t,n){return{x:t.x+n.x,y:t.y+n.y}}function sub2D(t,n){return{x:t.x-n.x,y:t.y-n.y}}function mul2D(t,n){return{x:t.x*n.x,y:t.y*n.y}}function muls2D(t,n){return{x:t.x*n,y:t.y*n}}function mad2D(t,n,o){return{x:t.x*n.x+o.x,y:t.y*n.y+o.y}}function lengthSq2D(t){return t.x*t.x+t.y*t.y}function length2D(t){return Math.sqrt(lengthSq2D(t))}function dot2D(t,n){return t.x*n.x+t.y*n.y}function normalize2D(t){var n=lengthSq2D(t);return n>1e-5?muls2D(t,1/Math.sqrt(n)):t}function evalLine2D(t,n,o){return add2D(t,muls2D(n,o))}function getProjectionFactor2D(t,n){return dot2D(t,n)/lengthSq2D(n)}function projectUnto2D(t,n){return muls2D(n,getProjectionFactor2D(t,n))}function projectPointUntoSegment2D(t,n,o){var r=sub2D(o,n);return evalLine2D(n,r,getProjectionFactor2D(sub2D(t,n),r))}function mat3FromArray(t){if(9!==t.length)throw new Error("Cannot convert this object into a matrix, wrong size: "+t.length);var n=t[0],o=t[1],r=t[2],e=t[3],i=t[4],u=t[5],a=t[6],s=t[7],c=t[8];return mat3(vec3(n,e,a),vec3(o,i,s),vec3(r,u,c))}function mat3ToArray(t){return[t.rows[0].x,t.rows[1].x,t.rows[2].x,t.rows[0].y,t.rows[1].y,t.rows[2].y,t.rows[0].z,t.rows[1].z,t.rows[2].z]}function getSquaredDistanceToSegment2D(t,n,o){var r=sub2D(o,n),e=getProjectionFactor2D(sub2D(t,n),r);return lengthSq2D(sub2D(evalLine2D(n,r,e=clamp(e,0,1)),t))}function getDistanceToSegment2D(t,n,o){return Math.sqrt(getSquaredDistanceToSegment2D(t,n,o))}function getParameter_ClosestPointToSegment2D(t,n,o){var r=getProjectionFactor2D(sub2D(t,n),o);return r=clamp(r,0,1)}function vec3(t,n,o){return{x:t,y:n,z:o}}function equal3D(t,n,o){return equal(t.x,n.x,o)&&equal(t.y,n.y,o)&&equal(t.z,n.z,o)}function add3D(t,n){return{x:t.x+n.x,y:t.y+n.y,z:t.z+n.z}}function sub3D(t,n){return{x:t.x-n.x,y:t.y-n.y,z:t.z-n.z}}function mul3D(t,n){return{x:t.x*n.x,y:t.y*n.y,z:t.z*n.z}}function muls3D(t,n){return{x:t.x*n,y:t.y*n,z:t.z*n}}function mad3D(t,n,o){return{x:t.x*n.x+o.x,y:t.y*n.y+o.y,z:t.z*n.z+o.z}}function lengthSq3D(t){return t.x*t.x+t.y*t.y+t.z*t.z}function length3D(t){return Math.sqrt(lengthSq3D(t))}function dot3D(t,n){return t.x*n.x+t.y*n.y+t.z*n.z}function normalize3D(t){var n=lengthSq3D(t);return n>1e-5?muls3D(t,1/Math.sqrt(n)):t}function vec4(t,n,o,r){return{x:t,y:n,z:o,w:r}}function equal4D(t,n,o){return equal(t.x,n.x,o)&&equal(t.y,n.y,o)&&equal(t.z,n.z,o)&&equal(t.w,n.w,o)}function dot4D(t,n){return t.x*n.x+t.y*n.y+t.z*n.z+t.w*n.w}function muls4D(t,n){return{x:t.x*n,y:t.y*n,z:t.z*n,w:t.w*n}}function homogenize4D(t){var n=t.w;return 1!==n&&0!==n?muls4D(t,1/n):t}function homogenize3D(t){var n=t.z;return 1!==n&&0!==n?muls3D(t,1/n):t}function mat3Identity(){return{rows:[vec3(1,0,0),vec3(0,1,0),vec3(0,0,1)]}}function mat4(t,n,o,r){return{rows:[t,n,o,r]}}function mat3(t,n,o){return{rows:[t,n,o]}}function prodmat3(t,n){var o=transposemat3(n);return mat3(mulmat3(o,t.rows[0]),mulmat3(o,t.rows[1]),mulmat3(o,t.rows[2]))}function mulmat4(t,n){return vec4(dot4D(t.rows[0],n),dot4D(t.rows[1],n),dot4D(t.rows[2],n),dot4D(t.rows[3],n))}function mulmat3(t,n){return vec3(dot3D(t.rows[0],n),dot3D(t.rows[1],n),dot3D(t.rows[2],n))}function transposemat4(t){var n=t.rows[0],o=t.rows[1],r=t.rows[2],e=t.rows[3];return mat4(vec4(n.x,o.x,r.x,e.x),vec4(n.y,o.y,r.y,e.y),vec4(n.z,o.z,r.z,e.z),vec4(n.w,o.w,r.w,e.w))}function transposemat3(t){var n=t.rows[0],o=t.rows[1],r=t.rows[2];return mat3(vec3(n.x,o.x,r.x),vec3(n.y,o.y,r.y),vec3(n.z,o.z,r.z))}function projectPosition(t,n){return homogenize4D(mulmat4(t,vec4(n.x,n.y,n.z,1)))}function projectPosition2(t,n){return homogenize3D(mulmat3(t,vec3(n.x,n.y,1)))}function toHTMLColorString(t){var n=Math.round;return void 0!==t.x&&void 0!==t.y&&void 0!==t.z?void 0!==t.w?"rgba("+[n(255*t.x),n(255*t.y),n(255*t.z),t.w].join(",")+")":"rgb("+[n(255*t.x),n(255*t.y),n(255*t.z)].join(",")+")":void 0!==t.r&&void 0!==t.g&&void 0!==t.b?void 0!==t.a?"rgba("+[n(255*t.r),n(255*t.g),n(255*t.b),t.a].join(",")+")":"rgb("+[n(255*t.r),n(255*t.g),n(255*t.b)].join(",")+")":void 0}var Path2=function(){function t(t){void 0===t&&(t=[]),this.points=t.map(function(t){return vec3(t.x,t.y,1)})}return t.prototype.pushPoint=function(t){this.points.push(vec3(t.x,t.y,1))},t.prototype.popPoint=function(){this.points.splice(this.points.length-1,1)},t.prototype.count=function(){return this.points.length},t.prototype.setPoints=function(t){void 0===t&&(t=[]),this.points=t.map(function(t){return vec3(t.x,t.y,1)})},t.prototype.getPoints=function(){return this.points.map(function(t){return vec2(t.x,t.y)})},t.prototype.reverse=function(){this.points.reverse()},t.prototype.append=function(t){var n;(n=this.points).push.apply(n,t.points)},t.prototype.shiftLeft=function(){var t;(t=this.points).push.apply(t,this.points.splice(0,1))},t.prototype.shiftRight=function(){this.points.splice(0,0,this.points.splice(this.points.length-1,1)[0])},t.prototype.close=function(){var t=this.points[0],n=this.points[this.points.length-1];t.x===n.x&&t.y===n.y||this.pushPoint(t)},t.prototype.transform=function(t){this.points=this.points.map(function(n){return mulmat3(t,n)})},t.makeQuad=function(n,o,r,e){return new t([vec2(n,o),vec2(n,e),vec2(r,e),vec2(r,o),vec2(n,o)])},t.prototype.scale=function(t,n){for(var o=0,r=this.points;o<r.length;o++){var e=r[o];e.x*=t,e.y*=n}},t.prototype.toCssPath=function(t){return void 0===t&&(t="px"),"polygon("+this.points.map(function(n){return""+n.x+t+" "+n.y+t}).join(", ")+")"},t.prototype.getBoundingBox=function(){var t=this.points.map(function(t){return t.x}),n=this.points.map(function(t){return t.y}),o=Math.min.apply(Math,t),r=Math.min.apply(Math,n);return{x:o,y:r,width:Math.max.apply(Math,t)-o,height:Math.max.apply(Math,n)-r}},t}();export{equal,vec2,equal2D,clamp,mix,add2D,sub2D,mul2D,muls2D,mad2D,lengthSq2D,length2D,dot2D,normalize2D,evalLine2D,getProjectionFactor2D,projectUnto2D,projectPointUntoSegment2D,mat3FromArray,mat3ToArray,getSquaredDistanceToSegment2D,getDistanceToSegment2D,getParameter_ClosestPointToSegment2D,vec3,equal3D,add3D,sub3D,mul3D,muls3D,mad3D,lengthSq3D,length3D,dot3D,normalize3D,vec4,equal4D,dot4D,muls4D,homogenize4D,homogenize3D,mat3Identity,mat4,mat3,prodmat3,mulmat4,mulmat3,transposemat4,transposemat3,projectPosition,projectPosition2,toHTMLColorString,Path2};
